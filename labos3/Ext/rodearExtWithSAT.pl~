:-include(entradaRodear1).
%:-include(entradaSmallRodear2).
:-dynamic(varNumber/3).
symbolicOutput(0). % set to 1 to see symbolic output only; 0 otherwise.

writeClauses:-numSides, corners, hEdges, vEdges, points.

numSides:-num(I,J,K), sides(I,J,L), atLeast(K,L), atMost(K,L),fail.
numSides.

sides(I,J,L):- I2 is I+1, J2 is J+1, L=[h-I-J, h-I2-J, v-I-J, v-I-J2].

% alo K (out of 4).
atLeast(K,L):-subcjt(L,S), length(S,KL), KL is 5-K, writeClause(S),fail.
atLeast(_,_).

% amo generic
atMost(K,L):-subcjt(L,S), length(S,KL), KL is K+1, neg(S,C), writeClause(C),fail.
atMost(_,_).

% neg. the whole clause
neg([],[]).
neg([X|S],C):-neg(S,S2),concat([\+X],S2,C).

% corners
corners:-rows(N), columns(M), N2 is N+1, M2 is M+1,
	C1=[h-1-1,  v-1-1],  atMost(2,C1), notOne(C1),
	C2=[h-1-M,  v-1-M2], atMost(2,C2), notOne(C2),
	C3=[h-N2-1, v-N-1],  atMost(2,C3), notOne(C3),
	C4=[h-N2-M, v-N-M2], atMost(2,C4), notOne(C4).

% horizontal edges
hEdges:-rows(N), columns(M), M2 is M-1, between(1,M2,J), 
	J2 is J+1, E1=[h-1-J, h-1-J2, v-1-J2],    atMost(2,E1), notOne(E1),
	N2 is N+1, E2=[h-N2-J, h-N2-J2, v-N-J2],  atMost(2,E2), notOne(E2),fail.
hEdges.	


% vertical edges
vEdges:-rows(N), columns(M), N2 is N-1, between(1,N2,I),
	I2 is I+1, E3=[h-I2-1, v-I-1, v-I2-1],   atMost(2,E3), notOne(E3),
	M2 is M+1, E4=[h-I2-M, v-I-M2, v-I2-M2], atMost(2,E4), notOne(E4),fail.
	%M2 is M+1, E4=[h-I2-N, v-I-M2, v-I2-M2], atMost(2,E4), notOne(E4),fail.
vEdges.	

% 4-intersection vertex
points:-rows(N), columns(M), between(2,N,I), between(2,M,J),
	vertex(I,J,L), atMost(2,L), notOne(L), fail.
points.

vertex(I,J,L):- I2 is I-1, J2 is J-1, L=[h-I-J2, h-I-J, v-I2-J, v-I-J].

notOne([L1,L2]):-
	writeClause([\+L1, L2]),
	writeClause([\+L2, L1]).
notOne([L1,L2,L3]):-
	writeClause([\+L1, L2, L3]),
	writeClause([\+L2, L1, L3]),
	writeClause([\+L3, L1, L2]).
notOne([L1,L2,L3,L4]):-
	writeClause([\+L1, L2, L3, L4]),
	writeClause([\+L2, L1, L3, L4]),
	writeClause([\+L3, L1, L2, L4]),
	writeClause([\+L4, L1, L2, L3]).

%notOne(L):-subcjt(L,S), length(S,1), concat(S,R,L), concat(\+S,R,C), writeClause(C),fail.
%notOne(_).

list_of_nat(0,[]).
list_of_nat(N,L):-N2 is N-1, list_of_nat(N2,L2), concat(L2,[N],L),!.

atmost(K,N):-
	list_of_nat(N,L), subcjt(L,S), length(S,KL), KL is K+1, neg(S,C), 
	writeClause(C),	fail.
atmost(_,_).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

concat([],L,L).
concat([X|L1],L2,[X|L3]):-concat(L1,L2,L3).

subcjt([],[]).
subcjt([X|C],[X|S]):-subcjt(C,S).
subcjt([_|C],S):-subcjt(C,S).

pert(X,[X|_]).
pert(X,[_|L]):-pert(X,L).

pert_con_resto(X,L,Resto):-concat(L1,[X|L2],L), concat(L1,L2,Resto).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% DISPLAY SOLUTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
writeHeaderPS:-
    writeln('%!PS'),
    writeln('matrix currentmatrix /originmat exch def'),
    writeln('/umatrix {originmat matrix concatmatrix setmatrix} def'),
    writeln('[28.3465 0 0 28.3465 10.5 100.0] umatrix').

writeGrid:-
    writeln('0.01 setlinewidth'),
    writeVertGrid,
    writeHorizGrid.

writeVertGrid:-
    rows(R), columns(C), C1 is C+1,
    between(1,R,I), between(1,C1,J), drawVertical(I,J),fail.
writeVertGrid.

writeHorizGrid:-
    rows(R), columns(C), R1 is R+1,
    between(1,R1,I), between(1,C,J), drawHorizontal(I,J),fail.
writeHorizGrid.

drawVertical(I,J):-
    rows(R),columns(C),
    Size is min(22/R,18/C),
    X is 1+(J-1)*Size,
    Y is 23-(I-1)*Size,
    write(X), write(' '), write(Y), write(' moveto'),nl,
    Y1 is Y-Size,
    write(X), write(' '), write(Y1), write(' lineto'),nl,
    writeln('stroke').

drawHorizontal(I,J):-
    rows(R),columns(C),
    Size is min(22/R,18/C),
    X is 1+(J-1)*Size,
    Y is 23-(I-1)*Size,
    write(X), write(' '), write(Y), write(' moveto'),nl,
    X1 is X+Size,
    write(X1), write(' '), write(Y), write(' lineto'),nl,
    writeln('stroke').

writeNumbers:-
    num(I,J,K),
    writeNumber(I,J,K),
    fail.
writeNumbers.

writeNumber(I,J,K):-
    rows(R),columns(C),
    Size is min(22/R,18/C),
    X is 1+(J-1)*Size + 3*Size/7,
    Y is 23-(I-1)*Size - 5*Size/7,
    writeln('0.001 setlinewidth'),
    S is Size/2,
    write('/Times-Roman findfont '), write(S), writeln(' scalefont setfont'),
    write(X), write(' '), write(Y), write(' moveto ('), write(K), writeln(') show').

writeSolution([X|M]):-
    writeLine(X),
    writeSolution(M).
writeSolution([]).
    
writeLine(X):-num2var(X,h-I-J),!,
    rows(R), columns(C), T is max(R,C),
    W is 2/T,
    write(W), 
    writeln(' setlinewidth'),
    drawHorizontal(I,J).
writeLine(X):-num2var(X,v-I-J),!,
    rows(R), columns(C), T is max(R,C),
    W is 2/T,
    write(W), 
    writeln(' setlinewidth'),
    drawVertical(I,J).
writeLine(_).

writePS(M):-
    tell('graph.ps'),
    writeHeaderPS,
    writeGrid,
    writeNumbers,
    writeSolution(M),
    writeln('showpage'),
    told.

displaySol([]).
displaySol(M):-concat([V],M2,M), num2var(V, h-I-J), write(' | '), write('h-'),write(I),write('-'),write(J), displaySol(M2).
displaySol(M):-concat([V],M2,M), num2var(V, v-I-J), write(' | '), write('v-'),write(I),write('-'),write(J), displaySol(M2).
writeCycle([]).
writeCycle([X|C]):-num2var(X,Y), write(Y), write(' '), writeCycle(C).

writeCycles([]).
writeCycles([C|Cyc]):-
		length(C,Csize), 
		write('\nCycle length: '), write(Csize), write(' -> ['), writeCycle(C), write(']'),nl,
		writeCycles(Cyc).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% OPTIMIZE FUNCTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

connected(X,X2):-num2var(X, h-I-J), num2var(X2,h-I-J2), J2 is J+1.
connected(X,X2):-num2var(X, h-I-J), num2var(X2,h-I-J2), J2 is J-1.
connected(X,X2):-num2var(X, h-I-J), num2var(X2,v-I-J).
connected(X,X2):-num2var(X, h-I-J), num2var(X2,v-I-J2), J2 is J+1.
connected(X,X2):-num2var(X, h-I-J), num2var(X2,v-I2-J), I2 is I-1.
connected(X,X2):-num2var(X, h-I-J), num2var(X2,v-I2-J2), I2 is I-1, J2 is J+1.

connected(X,X2):-num2var(X, v-I-J), num2var(X2,v-I2-J), I2 is I-1.
connected(X,X2):-num2var(X, v-I-J), num2var(X2,v-I2-J), I2 is I+1.
connected(X,X2):-num2var(X, v-I-J), num2var(X2,h-I-J).
connected(X,X2):-num2var(X, v-I-J), num2var(X2,h-I-J2), J2 is J-1.
connected(X,X2):-num2var(X, v-I-J), num2var(X2,h-I2-J), I2 is I+1.
connected(X,X2):-num2var(X, v-I-J), num2var(X2,h-I2-J2), I2 is I+1, J2 is J-1.


%h-1-3, h-1-4, h-2-4, v-1-5, v-2-3, v-2-4, h-3-4, h-4-4, v-3-5, h-1-2, v-1-2, h-4-3, v-3-3, h-2-2, 

%v 1 -2 -3 -4 5 6 7 -8 -9 -10 -11 -12 13 14 15 16 -17 18 -19 -20 -21 -22 23 24
%v -25 -26 27 28 -29 30 -31 0

% 1  -> h-1-3 
% 5  -> h-1-4
% 6  -> h-2-4
% 7  -> v-1-5
% 13 -> v-2-3
% 14 -> v-2-4
% 15 -> h-3-4
% 16 -> h-4-4
% 18 -> v-3-5
% 23 -> h-1-2
% 24 -> v-1-2
% 27 -> h-4-3
% 28 -> v-3-3
% 30 -> h-2-2


%getCycles([],0).
%getCycles(M,N):-concat([X],M1,M), hasCycle(X,M1,C1), concat([X],C1,C), length(C,Csize),
%		write('\nCycle length: '), write(Csize), write(' -> '), displaySol(C), write(' |\n'),
%		removeSides(C,M,M2), %	length(M2, MN2), write('sides left: '), write(MN2), write('\n'),
%		getCycles(M2,N2), N is N2+1.

getCycles([],[]).
getCycles(M,Cyc):-concat([X],M1,M), hasCycle(X,M1,C1), concat([X],C1,C), %length(C,Csize),
		%nl, write('Cycle length: '), write(Csize), write(' -> '), displaySol(C), write(' |\n'),
		removeSides(C,M,M2), %	length(M2, MN2), write('sides left: '), write(MN2), write('\n'),
		getCycles(M2,Cyc2), concat([C], Cyc2, Cyc).


hasCycle(X,M,C):-pert_con_resto(X2,M,M2), connected(X,X2), !,	%para que no unifique en la otra direccion
		%num2var(X,Xv), write(Xv), write(' is connected with '), num2var(X2,X2v), write(X2v), write('\n'),
		hasCycle(X2,M2,C2), concat([X2],C2,C).
hasCycle(_,[],[]).
hasCycle(_,_,_).

removeSides([],L,L).
removeSides([X|C],M,R):-pert_con_resto(X,M,M1), removeSides(C,M1,R).


neg2var([],[]).
neg2var([X|S],C):-num2var(X,Y), neg2var(S,S2), concat([\+Y],S2,C).

forbidCycles([],[]).
forbidCycles([C|Cyc],F):-neg2var(C,Cn), forbidCycles(Cyc,F1), concat([Cn], F1, F).

writeForbidden([C|F]):-writeClause(C), writeForbidden(F).
writeForbidden([]).

writeUltimate([C|F]):-write(C),nl,nl,writeUltimate(F).
writeUltimate([]).

% ========== No need to change the following: =====================================
%main:- symbolicOutput(1), !, writeClauses, halt. % escribir bonito, no ejecutar
%main:-  assert(numClauses(0)), assert(numVars(0)),
%	tell(clauses), writeClauses, told,
%	tell(header),  writeHeader,  told,
%	unix('cat header clauses > infile.cnf'),
%	unix('picosat -v -o model infile.cnf'),
%	unix('cat model'),
%	see(model), readModel(M), seen, getCycles(M,N), nl,nl,write('   #'),write(N),write(' Cycles found),nl,nl,
%	halt.

main:- symbolicOutput(1), !, writeClauses, halt. % escribir bonito, no ejecutar
main:- 
	launchSolver(C), length(C,K), forbidCycles(C,F), optimize(F,K),	% C -> List of cycles
	halt.

launchSolver(C):-
	assert(numClauses(0)), assert(numVars(0)),
	tell(clauses), writeClauses, told,
	tell(header),  writeHeader,  told,
	unix('cat header clauses > infile.cnf'),
	unix('picosat -v -o model infile.cnf'),
	unix('cat model'),
	see(model), readModel(M), seen, writePS(M),
	getCycles(M,C),	length(C,K), nl,nl,write('  #'),write(K),write(' Cycles found'),nl,nl, 
	writeCycles(C),
	nl, write('--------------------------'), nl, nl.

optimize(_,1).
optimize(F,_):-
	nl,write('---> OPTIMIZE <---'),nl,nl, %checkNeg(C), writeCycles(C),
	retract(numClauses(_)), assert(numClauses(0)),	
	tell(clauses), writeClauses, writeForbidden(F), told,
	tell(header),  writeHeader,  told,
	unix('cat header clauses > infile.cnf'),
	unix('picosat -v -o model infile.cnf'),
	unix('cat model'),
	see(model), readModel(M), seen,
	%write('TO GET CYCLES'),nl,!,
	getCycles(M,C2), length(C2,K2), nl,nl,write('  #'),write(K2),write(' Cycles found (opt)'),nl,nl,
	writeCycles(C2), writePS(M),
	nl, write('--------------------------'), nl, nl,
	forbidCycles(C2,F2), % write('new prohibitions: '), write(F2), nl,nl, 
	concat(F,F2,FN), %write('\n\n PROHIBITIONS SO FAR: \n'), writeUltimate(FN), nl,nl,nl,
	optimize(FN, K2).
%optimize(_,_).

var2num(T,N):- hash_term(T,Key), varNumber(Key,T,N),!.
var2num(T,N):- retract(numVars(N0)), N is N0+1, assert(numVars(N)), hash_term(T,Key),
	assert(varNumber(Key,T,N)), assert( num2var(N,T) ), !.

writeHeader:- numVars(N),numClauses(C),write('p cnf '),write(N), write(' '),write(C),nl.

countClause:-  retract(numClauses(N)), N1 is N+1, assert(numClauses(N1)),!.
writeClause([]):- symbolicOutput(1),!, nl.
writeClause([]):- countClause, write(0), nl.
writeClause([Lit|C]):- w(Lit), writeClause(C),!.
w( Lit ):- symbolicOutput(1), write(Lit), write(' '),!.
w(\+Var):- var2num(Var,N), write(-), write(N), write(' '),!.
w(  Var):- var2num(Var,N),           write(N), write(' '),!.
unix(Comando):-shell(Comando),!.
unix(_).

readModel(L):- get_code(Char), readWord(Char,W), readModel(L1), addIfPositiveInt(W,L1,L),!.
readModel([]).

addIfPositiveInt(W,L,[N|L]):- W = [C|_], between(48,57,C), number_codes(N,W), N>0, !.
addIfPositiveInt(_,L,L).

readWord(99,W):- repeat, get_code(Ch), member(Ch,[-1,10]), !, get_code(Ch1), readWord(Ch1,W),!.
readWord(-1,_):-!, fail. %end of file
readWord(C,[]):- member(C,[10,32]), !. % newline or white space marks end of word
readWord(Char,[Char|W]):- get_code(Char1), readWord(Char1,W), !.
%========================================================================================
